// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String
  username       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chatSessions   ChatSession[]
  learningPlans  LearningPlan[]
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String
  topic       String?
  messages    Json?    // Array of chat messages with role and content
  userMessage String?  // Keep for backward compatibility during migration
  aiResponse  String?  // Keep for backward compatibility during migration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningPlan {
  id             String   @id @default(uuid())
  userId         String
  title          String
  description    String?
  subjects       Json     // Array of subject IDs
  progress       Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones     LearningPlanMilestone[]

  @@index([userId, isActive])
  @@index([userId, createdAt])
}

model LearningPlanMilestone {
  id           String   @id @default(uuid())
  planId       String
  title        String
  description  String?
  subjectId    String
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  orderIndex   Int
  createdAt    DateTime @default(now())

  plan         LearningPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  courses      Course[]

  @@index([planId, orderIndex])
  @@index([planId, isCompleted])
}

model Course {
  id           String   @id @default(uuid())
  milestoneId  String
  title        String
  description  String?
  content      String?  // Course content/material
  duration     Int?     // Duration in minutes
  difficulty   String?  // easy, medium, hard
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  orderIndex   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  milestone    LearningPlanMilestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@index([milestoneId, orderIndex])
  @@index([milestoneId, isCompleted])
}
