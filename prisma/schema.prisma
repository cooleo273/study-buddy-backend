// schema.prisma
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  hashedPassword String
  username       String?
  role           String   @default("user") // 'user' or 'admin'
  points         Int      @default(0)
  streakCount    Int      @default(0)
  lastActivityDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chatSessions   ChatSession[]
  learningPlans  LearningPlan[]
  quizAttempts   QuizAttempt[]
  badges         UserBadge[]
  generatedQuestions GeneratedQuestion[]
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String
  topic       String?
  messages    Json?    // Array of chat messages with role and content
  userMessage String?  // Keep for backward compatibility during migration
  aiResponse  String?  // Keep for backward compatibility during migration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningPlan {
  id             String   @id @default(uuid())
  userId         String
  title          String
  description    String?
  subjects       Json     // Array of subject IDs
  progress       Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones     LearningPlanMilestone[]

  @@index([userId, isActive])
  @@index([userId, createdAt])
}

model LearningPlanMilestone {
  id           String   @id @default(uuid())
  planId       String
  title        String
  description  String?
  subjectId    String
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  orderIndex   Int
  createdAt    DateTime @default(now())

  plan         LearningPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  courses      Course[]

  @@index([planId, orderIndex])
  @@index([planId, isCompleted])
}

model Course {
  id           String   @id @default(uuid())
  milestoneId  String
  title        String
  description  String?
  content      String?  // Course content/material
  duration     Int?     // Duration in minutes
  difficulty   String?  // easy, medium, hard
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  orderIndex   Int
  youtubeVideo Json?    // YouTube video suggestion with title, url, channel, duration, description
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  milestone    LearningPlanMilestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  quizzes      Quiz[]

  @@index([milestoneId, orderIndex])
  @@index([milestoneId, isCompleted])
}

model Quiz {
  id          String   @id @default(uuid())
  courseId    String
  title       String
  description String?
  passingScore Int      @default(70) // Minimum percentage to pass
  isRequired  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   QuizQuestion[]
  attempts    QuizAttempt[]

  @@index([courseId])
}

model QuizQuestion {
  id          String   @id @default(uuid())
  quizId      String
  question    String
  type        String   // 'multiple_choice', 'short_answer', 'true_false'
  options     Json?    // Array of options for multiple choice
  correctAnswer String // The correct answer
  explanation String?  // Explanation of why the answer is correct
  points      Int      @default(1)
  orderIndex  Int
  createdAt   DateTime @default(now())

  quiz        Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]

  @@index([quizId, orderIndex])
}

model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  score       Int      // Percentage score (0-100)
  isPassed    Boolean  @default(false)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  timeSpent   Int?     // Time spent in seconds

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]

  @@index([userId, quizId])
  @@index([quizId, completedAt])
}

model QuizAnswer {
  id          String   @id @default(uuid())
  attemptId   String
  questionId  String
  answer      String   // User's answer
  isCorrect   Boolean  @default(false)
  points      Int      @default(0)
  answeredAt  DateTime @default(now())

  attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question    QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@index([questionId])
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?  // URL or emoji
  points      Int      @default(0)  // Points awarded for earning this badge
  criteria    Json?    // Conditions to earn it, e.g., {"type": "course_completed", "count": 1}
  createdAt   DateTime @default(now())

  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Document {
  id          String   @id @default(uuid())
  title       String
  content     String?  // Full text content
  type        String   // 'book', 'past_question'
  grade       Int?     // 9-12 for Ethiopian curriculum
  subject     String?
  uploadedAt  DateTime @default(now())
  chunks      DocumentChunk[]

  @@index([type, grade, subject])
}

model DocumentChunk {
  id          String   @id @default(uuid())
  documentId  String
  content     String   // Chunked text content
  embedding   Unsupported("vector(768)")?  // Gemini text-embedding-004 dimension
  chunkIndex  Int
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

model GeneratedQuestion {
  id          String   @id @default(uuid())
  userId      String
  question    String
  answer      String   // Legacy field for backward compatibility
  options     Json?    // Array of multiple choice options
  correctAnswer String? // Correct answer (letter for MCQ, text for others)
  explanation String?  // Explanation of the answer
  subject     String?
  grade       Int?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
